//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "giftcode_items")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub giftcode_id: i32,
    pub item_id: i32,
    pub quantity: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::giftcode::Entity",
        from = "Column::GiftcodeId",
        to = "super::giftcode::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Giftcode,
    #[sea_orm(has_many = "super::giftcode_item_options::Entity")]
    GiftcodeItemOptions,
    #[sea_orm(
        belongs_to = "super::item_template::Entity",
        from = "Column::ItemId",
        to = "super::item_template::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    ItemTemplate,
}

impl Related<super::giftcode::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Giftcode.def()
    }
}

impl Related<super::giftcode_item_options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GiftcodeItemOptions.def()
    }
}

impl Related<super::item_template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemTemplate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
