//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "received_items")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub player_id: i32,
    pub item_id: i32,
    pub quantity: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub content: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::PlayerId",
        to = "super::player::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Player,
    #[sea_orm(has_many = "super::received_items_options::Entity")]
    ReceivedItemsOptions,
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl Related<super::received_items_options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReceivedItemsOptions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
