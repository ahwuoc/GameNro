//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "player")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub account_id: Option<i32>,
    pub name: String,
    pub head: i32,
    pub gender: i32,
    pub have_tennis_space_ship: Option<i8>,
    pub clan_id_sv1: i32,
    pub clan_id_sv2: i32,
    #[sea_orm(column_type = "Text")]
    pub data_inventory: String,
    #[sea_orm(column_type = "Text")]
    pub data_location: String,
    #[sea_orm(column_type = "Text")]
    pub data_point: String,
    #[sea_orm(column_type = "Text")]
    pub data_magic_tree: String,
    #[sea_orm(column_type = "Text")]
    pub items_body: String,
    #[sea_orm(column_type = "Text")]
    pub items_bag: String,
    #[sea_orm(column_type = "Text")]
    pub items_box: String,
    #[sea_orm(column_type = "Text")]
    pub items_box_lucky_round: String,
    #[sea_orm(column_type = "Text")]
    pub friends: String,
    #[sea_orm(column_type = "Text")]
    pub enemies: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub data_offtrain: String,
    #[sea_orm(column_type = "Text")]
    pub data_intrinsic: String,
    #[sea_orm(column_type = "Text")]
    pub data_item_time: String,
    #[sea_orm(column_type = "Text")]
    pub data_task: String,
    #[sea_orm(column_type = "Text")]
    pub data_mabu_egg: String,
    #[sea_orm(column_type = "Text")]
    pub data_charm: String,
    #[sea_orm(column_type = "Text")]
    pub skills: String,
    #[sea_orm(column_type = "Text")]
    pub skills_shortcut: String,
    #[sea_orm(column_type = "Text")]
    pub pet: String,
    #[sea_orm(column_type = "Text")]
    pub data_black_ball: String,
    #[sea_orm(column_type = "Text")]
    pub data_side_task: String,
    pub create_time: DateTimeUtc,
    pub diem_danh: i64,
    pub diem_danh2: i64,
    pub soi_boss: i64,
    #[sea_orm(column_name = "pointPvp")]
    pub point_pvp: Option<i32>,
    pub gold_vo_dai: i64,
    pub gold_dai_hoi: i64,
    pub rank_sieu_hang: i32,
    #[sea_orm(column_name = "NguHanhSonPoint")]
    pub ngu_hanh_son_point: Option<i32>,
    pub cap_yari: i32,
    #[sea_orm(column_type = "Text")]
    pub data_card: String,
    #[sea_orm(column_type = "Text")]
    pub bill_data: String,
    #[sea_orm(column_type = "Text")]
    pub data_item_time_sieu_cap: String,
    pub vodaisinhtu: String,
    pub bandokhobau: String,
    pub doanhtrai: i64,
    pub conduongrandoc: String,
    #[sea_orm(column_type = "Text")]
    pub data_achievement: String,
    #[sea_orm(column_type = "Text")]
    pub data_luyentap: String,
    pub ruonggo: String,
    pub point_noel: i32,
    pub chottop: String,
    pub dhtime: String,
    pub moc_1: i32,
    pub moc_2: i32,
    pub moc_3: i32,
    pub moc_4: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccountId",
        to = "super::account::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Account,
    #[sea_orm(has_many = "super::received_items::Entity")]
    ReceivedItems,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::received_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReceivedItems.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
