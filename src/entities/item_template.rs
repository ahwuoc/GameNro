//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "item_template")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_name = "TYPE")]
    pub r#type: i32,
    pub gender: i16,
    #[sea_orm(column_name = "NAME")]
    pub name: String,
    pub description: String,
    pub icon_id: i32,
    pub part: i32,
    pub is_up_to_up: i8,
    pub power_require: i32,
    pub gold: i32,
    pub gem: i32,
    pub head: i32,
    pub body: i32,
    pub leg: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::box_item_actions::Entity")]
    BoxItemActions,
    #[sea_orm(has_many = "super::box_item_drops::Entity")]
    BoxItemDrops,
    #[sea_orm(has_many = "super::giftcode_items::Entity")]
    GiftcodeItems,
    #[sea_orm(has_many = "super::market_items::Entity")]
    MarketItems,
}

impl Related<super::box_item_actions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BoxItemActions.def()
    }
}

impl Related<super::box_item_drops::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BoxItemDrops.def()
    }
}

impl Related<super::giftcode_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GiftcodeItems.def()
    }
}

impl Related<super::market_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MarketItems.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
