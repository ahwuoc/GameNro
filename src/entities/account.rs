//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password: String,
    pub create_time: Option<DateTimeUtc>,
    pub update_time: Option<DateTimeUtc>,
    pub ban: i16,
    pub bao_tri: i32,
    pub point_post: i32,
    pub last_post: i32,
    pub role: i32,
    pub is_admin: i8,
    pub last_time_login: DateTimeUtc,
    pub last_time_logout: DateTimeUtc,
    pub last_time_off: DateTimeUtc,
    pub date_created: DateTime,
    pub ip_address: Option<String>,
    pub gmail: Option<String>,
    pub active: Option<i8>,
    pub xac_nhan: i32,
    pub thoi_vang: i32,
    pub tichdiem: i32,
    pub server_login: i32,
    #[sea_orm(column_type = "Double", nullable)]
    pub bd_player: Option<f64>,
    pub is_gift_box: Option<i8>,
    pub gift_time: Option<String>,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")", nullable)]
    pub reward: Option<String>,
    pub tongnap: i32,
    pub coin: i32,
    pub vnd: Option<i32>,
    pub vnd_reward: i32,
    pub admin_key: i32,
    pub gioithieu: i32,
    pub luotquay: i32,
    pub mkc2: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bank_accounts::Entity")]
    BankAccounts,
    #[sea_orm(has_many = "super::comments::Entity")]
    Comments,
    #[sea_orm(has_many = "super::news::Entity")]
    News,
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
    #[sea_orm(has_one = "super::player::Entity")]
    Player,
    #[sea_orm(has_one = "super::shared_images::Entity")]
    SharedImages,
    #[sea_orm(has_many = "super::withdrawals::Entity")]
    Withdrawals,
}

impl Related<super::bank_accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BankAccounts.def()
    }
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::news::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::News.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl Related<super::shared_images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SharedImages.def()
    }
}

impl Related<super::withdrawals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Withdrawals.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
